// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Danish language picker renders without ðŸ’¥ matches snaphot 1`] = `
<LanguagePicker>
  <Wrapper>
    <div
      className="css-g8g379-Wrapper e1g7xtvp0"
    >
      <LanguageDropdownButton
        onClick={[Function]}
      >
        <button
          className="css-1o1f2rc-LanguageDropdownButton e1g7xtvp2"
          onClick={[Function]}
        >
          <LanguageIcon>
            <svg
              height="22"
              viewBox="0 0 16 16"
              width="22"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M7.996 0A7.994 7.994 0 000 8c0 4.42 3.576 8 7.996 8a8.001 8.001 0 100-16zM13.6 4.8h-2.453A12.096 12.096 0 0010 2c1.53.496 2.802 1.498 3.6 2.8zM8 1.6c.7.968 1.244 2.046 1.6 3.2H6.4c.356-1.154.9-2.232 1.6-3.2zm-6.2 8A6.644 6.644 0 011.6 8c0-.552.073-1.088.2-1.6h2.596A13.677 13.677 0 004.292 8c0 .544.043 1.076.108 1.6H1.8zm.6 1.6h2.453c.27.982.648 1.924 1.147 2.8a6.594 6.594 0 01-3.6-2.8zm2.453-6.4H2.4A6.594 6.594 0 016 2a12.17 12.17 0 00-1.147 2.8zM8 14.4a11.22 11.22 0 01-1.6-3.2h3.2A11.22 11.22 0 018 14.4zm1.872-4.8H6.128A11.116 11.116 0 016 8c0-.544.052-1.076.128-1.6h3.744C9.948 6.924 10 7.456 10 8s-.052 1.076-.128 1.6zM10 14c.499-.877.877-1.817 1.147-2.8H13.6A6.619 6.619 0 0110 14zm1.6-4.4c.062-.524.108-1.056.108-1.6s-.043-1.076-.108-1.6h2.596c.127.512.204 1.048.204 1.6s-.073 1.088-.204 1.6H11.6z"
                fill="#FFF"
                fillRule="evenodd"
                stroke="none"
                strokeWidth="1"
              />
            </svg>
          </LanguageIcon>
        </button>
      </LanguageDropdownButton>
      <ForwardRef(MotionComponent)
        animate="closed"
        initial={
          Object {
            "opacity": 0,
            "y": -20,
          }
        }
        style={
          Object {
            "pointerEvents": "none",
            "userSelect": "none",
          }
        }
        transition={
          Object {
            "damping": 100,
            "stiffness": 400,
            "type": "spring",
          }
        }
        variants={
          Object {
            "closed": Object {
              "opacity": 0,
              "y": -20,
            },
            "open": Object {
              "opacity": 1,
              "y": 0,
            },
          }
        }
      >
        <div
          style={
            Object {
              "opacity": 0,
              "pointerEvents": "none",
              "transform": "translateY(-20px) translateZ(0)",
              "userSelect": "none",
            }
          }
        >
          <Dropdown>
            <div
              className="css-18z9q10-Dropdown e1g7xtvp5"
            >
              <Option
                key="dk"
              >
                <div
                  className="css-1xjnew5-Option e1g7xtvp1"
                >
                  <StyledLink
                    to="/dk/new-member"
                  >
                    <Link
                      className="css-3wdfps-StyledLink e1g7xtvp3"
                      to="/dk/new-member"
                    >
                      <LinkAnchor
                        className="css-3wdfps-StyledLink e1g7xtvp3"
                        href="/dk/new-member"
                        navigate={[Function]}
                      >
                        <a
                          className="css-3wdfps-StyledLink e1g7xtvp3"
                          href="/dk/new-member"
                          onClick={[Function]}
                        >
                          Dansk
                        </a>
                      </LinkAnchor>
                    </Link>
                  </StyledLink>
                  <Divider>
                    <span
                      className="css-17zukb2-Divider e1g7xtvp4"
                    />
                  </Divider>
                </div>
              </Option>
              <Option
                key="dk-en"
              >
                <div
                  className="css-1xjnew5-Option e1g7xtvp1"
                >
                  <StyledLink
                    to="/dk-en/new-member"
                  >
                    <Link
                      className="css-3wdfps-StyledLink e1g7xtvp3"
                      to="/dk-en/new-member"
                    >
                      <LinkAnchor
                        className="css-3wdfps-StyledLink e1g7xtvp3"
                        href="/dk-en/new-member"
                        navigate={[Function]}
                      >
                        <a
                          className="css-3wdfps-StyledLink e1g7xtvp3"
                          href="/dk-en/new-member"
                          onClick={[Function]}
                        >
                          English
                        </a>
                      </LinkAnchor>
                    </Link>
                  </StyledLink>
                </div>
              </Option>
            </div>
          </Dropdown>
        </div>
        <Memo(MountComponent)
          innerRef={
            Object {
              "current": <div
                style="pointer-events: none; user-select: none; opacity: 0; transform: translateY(-20px) translateZ(0);"
              >
                <div
                  class="css-18z9q10-Dropdown e1g7xtvp5"
                >
                  <div
                    class="css-1xjnew5-Option e1g7xtvp1"
                  >
                    <a
                      class="css-3wdfps-StyledLink e1g7xtvp3"
                      href="/dk/new-member"
                    >
                      Dansk
                    </a>
                    <span
                      class="css-17zukb2-Divider e1g7xtvp4"
                    />
                  </div>
                  <div
                    class="css-1xjnew5-Option e1g7xtvp1"
                  >
                    <a
                      class="css-3wdfps-StyledLink e1g7xtvp3"
                      href="/dk-en/new-member"
                    >
                      English
                    </a>
                  </div>
                </div>
              </div>,
            }
          }
          isStatic={false}
          values={
            MotionValuesMap {
              "hasMounted": true,
              "onUpdate": undefined,
              "output": [Function],
              "unsubscribers": Map {
                "opacity" => [Function],
                "y" => [Function],
              },
              "values": Map {
                "opacity" => MotionValue {
                  "canTrackVelocity": true,
                  "current": 0,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
                "y" => MotionValue {
                  "canTrackVelocity": true,
                  "current": -20,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
              },
            }
          }
        />
        <Component
          animate="closed"
          controls={
            ValueAnimationControls {
              "activeOverrides": Set {},
              "baseTarget": Object {
                "opacity": 0,
                "y": -20,
              },
              "defaultTransition": Object {
                "damping": 100,
                "stiffness": 400,
                "type": "spring",
              },
              "hasValue": [Function],
              "isAnimating": Set {
                "opacity",
                "y",
              },
              "makeTargetAnimatable": [Function],
              "overrides": Array [],
              "props": Object {
                "animate": "closed",
                "children": <Dropdown>
                  <Option>
                    <StyledLink
                      to="/dk/new-member"
                    >
                      Dansk
                    </StyledLink>
                    <Divider />
                  </Option>
                  <Option>
                    <StyledLink
                      to="/dk-en/new-member"
                    >
                      English
                    </StyledLink>
                  </Option>
                </Dropdown>,
                "initial": Object {
                  "opacity": 0,
                  "y": -20,
                },
                "style": Object {
                  "pointerEvents": "none",
                  "userSelect": "none",
                },
                "transition": Object {
                  "damping": 100,
                  "stiffness": 400,
                  "type": "spring",
                },
                "variants": Object {
                  "closed": Object {
                    "opacity": 0,
                    "y": -20,
                  },
                  "open": Object {
                    "opacity": 1,
                    "y": 0,
                  },
                },
              },
              "readValueFromSource": [Function],
              "resolvedOverrides": Array [],
              "values": MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "opacity" => [Function],
                  "y" => [Function],
                },
                "values": Map {
                  "opacity" => MotionValue {
                    "canTrackVelocity": true,
                    "current": 0,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "stopAnimation": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                  "y" => MotionValue {
                    "canTrackVelocity": true,
                    "current": -20,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "stopAnimation": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              },
              "variants": Object {
                "closed": Object {
                  "opacity": 0,
                  "y": -20,
                },
                "open": Object {
                  "opacity": 1,
                  "y": 0,
                },
              },
            }
          }
          inherit={false}
          initial={
            Object {
              "opacity": 0,
              "y": -20,
            }
          }
          key="animation"
          transition={
            Object {
              "damping": 100,
              "stiffness": 400,
              "type": "spring",
            }
          }
          values={
            MotionValuesMap {
              "hasMounted": true,
              "onUpdate": undefined,
              "output": [Function],
              "unsubscribers": Map {
                "opacity" => [Function],
                "y" => [Function],
              },
              "values": Map {
                "opacity" => MotionValue {
                  "canTrackVelocity": true,
                  "current": 0,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
                "y" => MotionValue {
                  "canTrackVelocity": true,
                  "current": -20,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
              },
            }
          }
          variants={
            Object {
              "closed": Object {
                "opacity": 0,
                "y": -20,
              },
              "open": Object {
                "opacity": 1,
                "y": 0,
              },
            }
          }
        />
      </ForwardRef(MotionComponent)>
    </div>
  </Wrapper>
</LanguagePicker>
`;

exports[`Norwegian language picker renders without ðŸ’¥ matches snaphot 1`] = `
<LanguagePicker>
  <Wrapper>
    <div
      className="css-g8g379-Wrapper e1g7xtvp0"
    >
      <LanguageDropdownButton
        onClick={[Function]}
      >
        <button
          className="css-1o1f2rc-LanguageDropdownButton e1g7xtvp2"
          onClick={[Function]}
        >
          <LanguageIcon>
            <svg
              height="22"
              viewBox="0 0 16 16"
              width="22"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M7.996 0A7.994 7.994 0 000 8c0 4.42 3.576 8 7.996 8a8.001 8.001 0 100-16zM13.6 4.8h-2.453A12.096 12.096 0 0010 2c1.53.496 2.802 1.498 3.6 2.8zM8 1.6c.7.968 1.244 2.046 1.6 3.2H6.4c.356-1.154.9-2.232 1.6-3.2zm-6.2 8A6.644 6.644 0 011.6 8c0-.552.073-1.088.2-1.6h2.596A13.677 13.677 0 004.292 8c0 .544.043 1.076.108 1.6H1.8zm.6 1.6h2.453c.27.982.648 1.924 1.147 2.8a6.594 6.594 0 01-3.6-2.8zm2.453-6.4H2.4A6.594 6.594 0 016 2a12.17 12.17 0 00-1.147 2.8zM8 14.4a11.22 11.22 0 01-1.6-3.2h3.2A11.22 11.22 0 018 14.4zm1.872-4.8H6.128A11.116 11.116 0 016 8c0-.544.052-1.076.128-1.6h3.744C9.948 6.924 10 7.456 10 8s-.052 1.076-.128 1.6zM10 14c.499-.877.877-1.817 1.147-2.8H13.6A6.619 6.619 0 0110 14zm1.6-4.4c.062-.524.108-1.056.108-1.6s-.043-1.076-.108-1.6h2.596c.127.512.204 1.048.204 1.6s-.073 1.088-.204 1.6H11.6z"
                fill="#FFF"
                fillRule="evenodd"
                stroke="none"
                strokeWidth="1"
              />
            </svg>
          </LanguageIcon>
        </button>
      </LanguageDropdownButton>
      <ForwardRef(MotionComponent)
        animate="closed"
        initial={
          Object {
            "opacity": 0,
            "y": -20,
          }
        }
        style={
          Object {
            "pointerEvents": "none",
            "userSelect": "none",
          }
        }
        transition={
          Object {
            "damping": 100,
            "stiffness": 400,
            "type": "spring",
          }
        }
        variants={
          Object {
            "closed": Object {
              "opacity": 0,
              "y": -20,
            },
            "open": Object {
              "opacity": 1,
              "y": 0,
            },
          }
        }
      >
        <div
          style={
            Object {
              "opacity": 0,
              "pointerEvents": "none",
              "transform": "translateY(-20px) translateZ(0)",
              "userSelect": "none",
            }
          }
        >
          <Dropdown>
            <div
              className="css-18z9q10-Dropdown e1g7xtvp5"
            >
              <Option
                key="no"
              >
                <div
                  className="css-1xjnew5-Option e1g7xtvp1"
                >
                  <StyledLink
                    to="/no/new-member"
                  >
                    <Link
                      className="css-3wdfps-StyledLink e1g7xtvp3"
                      to="/no/new-member"
                    >
                      <LinkAnchor
                        className="css-3wdfps-StyledLink e1g7xtvp3"
                        href="/no/new-member"
                        navigate={[Function]}
                      >
                        <a
                          className="css-3wdfps-StyledLink e1g7xtvp3"
                          href="/no/new-member"
                          onClick={[Function]}
                        >
                          Norsk
                        </a>
                      </LinkAnchor>
                    </Link>
                  </StyledLink>
                  <Divider>
                    <span
                      className="css-17zukb2-Divider e1g7xtvp4"
                    />
                  </Divider>
                </div>
              </Option>
              <Option
                key="no-en"
              >
                <div
                  className="css-1xjnew5-Option e1g7xtvp1"
                >
                  <StyledLink
                    to="/no-en/new-member"
                  >
                    <Link
                      className="css-3wdfps-StyledLink e1g7xtvp3"
                      to="/no-en/new-member"
                    >
                      <LinkAnchor
                        className="css-3wdfps-StyledLink e1g7xtvp3"
                        href="/no-en/new-member"
                        navigate={[Function]}
                      >
                        <a
                          className="css-3wdfps-StyledLink e1g7xtvp3"
                          href="/no-en/new-member"
                          onClick={[Function]}
                        >
                          English
                        </a>
                      </LinkAnchor>
                    </Link>
                  </StyledLink>
                </div>
              </Option>
            </div>
          </Dropdown>
        </div>
        <Memo(MountComponent)
          innerRef={
            Object {
              "current": <div
                style="pointer-events: none; user-select: none; opacity: 0; transform: translateY(-20px) translateZ(0);"
              >
                <div
                  class="css-18z9q10-Dropdown e1g7xtvp5"
                >
                  <div
                    class="css-1xjnew5-Option e1g7xtvp1"
                  >
                    <a
                      class="css-3wdfps-StyledLink e1g7xtvp3"
                      href="/no/new-member"
                    >
                      Norsk
                    </a>
                    <span
                      class="css-17zukb2-Divider e1g7xtvp4"
                    />
                  </div>
                  <div
                    class="css-1xjnew5-Option e1g7xtvp1"
                  >
                    <a
                      class="css-3wdfps-StyledLink e1g7xtvp3"
                      href="/no-en/new-member"
                    >
                      English
                    </a>
                  </div>
                </div>
              </div>,
            }
          }
          isStatic={false}
          values={
            MotionValuesMap {
              "hasMounted": true,
              "onUpdate": undefined,
              "output": [Function],
              "unsubscribers": Map {
                "opacity" => [Function],
                "y" => [Function],
              },
              "values": Map {
                "opacity" => MotionValue {
                  "canTrackVelocity": true,
                  "current": 0,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
                "y" => MotionValue {
                  "canTrackVelocity": true,
                  "current": -20,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
              },
            }
          }
        />
        <Component
          animate="closed"
          controls={
            ValueAnimationControls {
              "activeOverrides": Set {},
              "baseTarget": Object {
                "opacity": 0,
                "y": -20,
              },
              "defaultTransition": Object {
                "damping": 100,
                "stiffness": 400,
                "type": "spring",
              },
              "hasValue": [Function],
              "isAnimating": Set {
                "opacity",
                "y",
              },
              "makeTargetAnimatable": [Function],
              "overrides": Array [],
              "props": Object {
                "animate": "closed",
                "children": <Dropdown>
                  <Option>
                    <StyledLink
                      to="/no/new-member"
                    >
                      Norsk
                    </StyledLink>
                    <Divider />
                  </Option>
                  <Option>
                    <StyledLink
                      to="/no-en/new-member"
                    >
                      English
                    </StyledLink>
                  </Option>
                </Dropdown>,
                "initial": Object {
                  "opacity": 0,
                  "y": -20,
                },
                "style": Object {
                  "pointerEvents": "none",
                  "userSelect": "none",
                },
                "transition": Object {
                  "damping": 100,
                  "stiffness": 400,
                  "type": "spring",
                },
                "variants": Object {
                  "closed": Object {
                    "opacity": 0,
                    "y": -20,
                  },
                  "open": Object {
                    "opacity": 1,
                    "y": 0,
                  },
                },
              },
              "readValueFromSource": [Function],
              "resolvedOverrides": Array [],
              "values": MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "opacity" => [Function],
                  "y" => [Function],
                },
                "values": Map {
                  "opacity" => MotionValue {
                    "canTrackVelocity": true,
                    "current": 0,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "stopAnimation": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                  "y" => MotionValue {
                    "canTrackVelocity": true,
                    "current": -20,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "stopAnimation": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              },
              "variants": Object {
                "closed": Object {
                  "opacity": 0,
                  "y": -20,
                },
                "open": Object {
                  "opacity": 1,
                  "y": 0,
                },
              },
            }
          }
          inherit={false}
          initial={
            Object {
              "opacity": 0,
              "y": -20,
            }
          }
          key="animation"
          transition={
            Object {
              "damping": 100,
              "stiffness": 400,
              "type": "spring",
            }
          }
          values={
            MotionValuesMap {
              "hasMounted": true,
              "onUpdate": undefined,
              "output": [Function],
              "unsubscribers": Map {
                "opacity" => [Function],
                "y" => [Function],
              },
              "values": Map {
                "opacity" => MotionValue {
                  "canTrackVelocity": true,
                  "current": 0,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
                "y" => MotionValue {
                  "canTrackVelocity": true,
                  "current": -20,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
              },
            }
          }
          variants={
            Object {
              "closed": Object {
                "opacity": 0,
                "y": -20,
              },
              "open": Object {
                "opacity": 1,
                "y": 0,
              },
            }
          }
        />
      </ForwardRef(MotionComponent)>
    </div>
  </Wrapper>
</LanguagePicker>
`;

exports[`Swedish language picker renders without ðŸ’¥ matches snaphot 1`] = `
<LanguagePicker>
  <Wrapper>
    <div
      className="css-g8g379-Wrapper e1g7xtvp0"
    >
      <LanguageDropdownButton
        onClick={[Function]}
      >
        <button
          className="css-1o1f2rc-LanguageDropdownButton e1g7xtvp2"
          onClick={[Function]}
        >
          <LanguageIcon>
            <svg
              height="22"
              viewBox="0 0 16 16"
              width="22"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M7.996 0A7.994 7.994 0 000 8c0 4.42 3.576 8 7.996 8a8.001 8.001 0 100-16zM13.6 4.8h-2.453A12.096 12.096 0 0010 2c1.53.496 2.802 1.498 3.6 2.8zM8 1.6c.7.968 1.244 2.046 1.6 3.2H6.4c.356-1.154.9-2.232 1.6-3.2zm-6.2 8A6.644 6.644 0 011.6 8c0-.552.073-1.088.2-1.6h2.596A13.677 13.677 0 004.292 8c0 .544.043 1.076.108 1.6H1.8zm.6 1.6h2.453c.27.982.648 1.924 1.147 2.8a6.594 6.594 0 01-3.6-2.8zm2.453-6.4H2.4A6.594 6.594 0 016 2a12.17 12.17 0 00-1.147 2.8zM8 14.4a11.22 11.22 0 01-1.6-3.2h3.2A11.22 11.22 0 018 14.4zm1.872-4.8H6.128A11.116 11.116 0 016 8c0-.544.052-1.076.128-1.6h3.744C9.948 6.924 10 7.456 10 8s-.052 1.076-.128 1.6zM10 14c.499-.877.877-1.817 1.147-2.8H13.6A6.619 6.619 0 0110 14zm1.6-4.4c.062-.524.108-1.056.108-1.6s-.043-1.076-.108-1.6h2.596c.127.512.204 1.048.204 1.6s-.073 1.088-.204 1.6H11.6z"
                fill="#FFF"
                fillRule="evenodd"
                stroke="none"
                strokeWidth="1"
              />
            </svg>
          </LanguageIcon>
        </button>
      </LanguageDropdownButton>
      <ForwardRef(MotionComponent)
        animate="closed"
        initial={
          Object {
            "opacity": 0,
            "y": -20,
          }
        }
        style={
          Object {
            "pointerEvents": "none",
            "userSelect": "none",
          }
        }
        transition={
          Object {
            "damping": 100,
            "stiffness": 400,
            "type": "spring",
          }
        }
        variants={
          Object {
            "closed": Object {
              "opacity": 0,
              "y": -20,
            },
            "open": Object {
              "opacity": 1,
              "y": 0,
            },
          }
        }
      >
        <div
          style={
            Object {
              "opacity": 0,
              "pointerEvents": "none",
              "transform": "translateY(-20px) translateZ(0)",
              "userSelect": "none",
            }
          }
        >
          <Dropdown>
            <div
              className="css-18z9q10-Dropdown e1g7xtvp5"
            >
              <Option
                key="se"
              >
                <div
                  className="css-1xjnew5-Option e1g7xtvp1"
                >
                  <StyledLink
                    to="/se/new-member"
                  >
                    <Link
                      className="css-3wdfps-StyledLink e1g7xtvp3"
                      to="/se/new-member"
                    >
                      <LinkAnchor
                        className="css-3wdfps-StyledLink e1g7xtvp3"
                        href="/se/new-member"
                        navigate={[Function]}
                      >
                        <a
                          className="css-3wdfps-StyledLink e1g7xtvp3"
                          href="/se/new-member"
                          onClick={[Function]}
                        >
                          Svenska
                        </a>
                      </LinkAnchor>
                    </Link>
                  </StyledLink>
                  <Divider>
                    <span
                      className="css-17zukb2-Divider e1g7xtvp4"
                    />
                  </Divider>
                </div>
              </Option>
              <Option
                key="se-en"
              >
                <div
                  className="css-1xjnew5-Option e1g7xtvp1"
                >
                  <StyledLink
                    to="/se-en/new-member"
                  >
                    <Link
                      className="css-3wdfps-StyledLink e1g7xtvp3"
                      to="/se-en/new-member"
                    >
                      <LinkAnchor
                        className="css-3wdfps-StyledLink e1g7xtvp3"
                        href="/se-en/new-member"
                        navigate={[Function]}
                      >
                        <a
                          className="css-3wdfps-StyledLink e1g7xtvp3"
                          href="/se-en/new-member"
                          onClick={[Function]}
                        >
                          English
                        </a>
                      </LinkAnchor>
                    </Link>
                  </StyledLink>
                </div>
              </Option>
            </div>
          </Dropdown>
        </div>
        <Memo(MountComponent)
          innerRef={
            Object {
              "current": <div
                style="pointer-events: none; user-select: none; opacity: 0; transform: translateY(-20px) translateZ(0);"
              >
                <div
                  class="css-18z9q10-Dropdown e1g7xtvp5"
                >
                  <div
                    class="css-1xjnew5-Option e1g7xtvp1"
                  >
                    <a
                      class="css-3wdfps-StyledLink e1g7xtvp3"
                      href="/se/new-member"
                    >
                      Svenska
                    </a>
                    <span
                      class="css-17zukb2-Divider e1g7xtvp4"
                    />
                  </div>
                  <div
                    class="css-1xjnew5-Option e1g7xtvp1"
                  >
                    <a
                      class="css-3wdfps-StyledLink e1g7xtvp3"
                      href="/se-en/new-member"
                    >
                      English
                    </a>
                  </div>
                </div>
              </div>,
            }
          }
          isStatic={false}
          values={
            MotionValuesMap {
              "hasMounted": true,
              "onUpdate": undefined,
              "output": [Function],
              "unsubscribers": Map {
                "opacity" => [Function],
                "y" => [Function],
              },
              "values": Map {
                "opacity" => MotionValue {
                  "canTrackVelocity": true,
                  "current": 0,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
                "y" => MotionValue {
                  "canTrackVelocity": true,
                  "current": -20,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
              },
            }
          }
        />
        <Component
          animate="closed"
          controls={
            ValueAnimationControls {
              "activeOverrides": Set {},
              "baseTarget": Object {
                "opacity": 0,
                "y": -20,
              },
              "defaultTransition": Object {
                "damping": 100,
                "stiffness": 400,
                "type": "spring",
              },
              "hasValue": [Function],
              "isAnimating": Set {
                "opacity",
                "y",
              },
              "makeTargetAnimatable": [Function],
              "overrides": Array [],
              "props": Object {
                "animate": "closed",
                "children": <Dropdown>
                  <Option>
                    <StyledLink
                      to="/se/new-member"
                    >
                      Svenska
                    </StyledLink>
                    <Divider />
                  </Option>
                  <Option>
                    <StyledLink
                      to="/se-en/new-member"
                    >
                      English
                    </StyledLink>
                  </Option>
                </Dropdown>,
                "initial": Object {
                  "opacity": 0,
                  "y": -20,
                },
                "style": Object {
                  "pointerEvents": "none",
                  "userSelect": "none",
                },
                "transition": Object {
                  "damping": 100,
                  "stiffness": 400,
                  "type": "spring",
                },
                "variants": Object {
                  "closed": Object {
                    "opacity": 0,
                    "y": -20,
                  },
                  "open": Object {
                    "opacity": 1,
                    "y": 0,
                  },
                },
              },
              "readValueFromSource": [Function],
              "resolvedOverrides": Array [],
              "values": MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "opacity" => [Function],
                  "y" => [Function],
                },
                "values": Map {
                  "opacity" => MotionValue {
                    "canTrackVelocity": true,
                    "current": 0,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "stopAnimation": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                  "y" => MotionValue {
                    "canTrackVelocity": true,
                    "current": -20,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "stopAnimation": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              },
              "variants": Object {
                "closed": Object {
                  "opacity": 0,
                  "y": -20,
                },
                "open": Object {
                  "opacity": 1,
                  "y": 0,
                },
              },
            }
          }
          inherit={false}
          initial={
            Object {
              "opacity": 0,
              "y": -20,
            }
          }
          key="animation"
          transition={
            Object {
              "damping": 100,
              "stiffness": 400,
              "type": "spring",
            }
          }
          values={
            MotionValuesMap {
              "hasMounted": true,
              "onUpdate": undefined,
              "output": [Function],
              "unsubscribers": Map {
                "opacity" => [Function],
                "y" => [Function],
              },
              "values": Map {
                "opacity" => MotionValue {
                  "canTrackVelocity": true,
                  "current": 0,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
                "y" => MotionValue {
                  "canTrackVelocity": true,
                  "current": -20,
                  "lastUpdated": 0,
                  "notifySubscriber": [Function],
                  "parent": undefined,
                  "prev": undefined,
                  "renderSubscribers": Set {
                    [Function],
                  },
                  "scheduleVelocityCheck": [Function],
                  "setChild": [Function],
                  "stopAnimation": [Function],
                  "timeDelta": 0,
                  "transformer": undefined,
                  "updateAndNotify": [Function],
                  "updateSubscribers": Set {
                    [Function],
                  },
                  "velocityCheck": [Function],
                },
              },
            }
          }
          variants={
            Object {
              "closed": Object {
                "opacity": 0,
                "y": -20,
              },
              "open": Object {
                "opacity": 1,
                "y": 0,
              },
            }
          }
        />
      </ForwardRef(MotionComponent)>
    </div>
  </Wrapper>
</LanguagePicker>
`;
